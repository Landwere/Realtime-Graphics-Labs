#version 430

layout(local_size_x = 1) in;
layout(std430, binding=0) buffer particlePositions {
    vec4 pos[];
};

layout(std430, binding=1) buffer particleVelocities {
    vec4 vel[];
};

layout(std430, binding=2) buffer splashPositions {
    vec4 sPos[];
};

uniform float masses[10];
uniform vec3 massPositions[10];
uniform int nMasses;
uniform float particleMass;
uniform float gravitationalConstant;
uniform float timeStep;
uniform vec3 windHorizontal;

highp float rand(vec2 co)
{
    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy ,vec2(a,b));
    highp float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

void main() {
    // Update your position and velocity for each particle, according to the gravitational forces 
    // from the masses.
    // First, find the total force acting on each particle.
    // For each mass add on a force of G m_1 m_2 r^-2 in the direction towards that mass location.
    // Now you have the total force, find acceleration and  update velocity and then position using 
    // the semi-implicit Euler update
    // Write these new values back to the buffer.
    // Remember to use gl_GlobalInvocationID to find which particle to modify!
    vec3 force;
    vec4 _pos = pos[ gl_GlobalInvocationID.x];
        vec3 displacement = windHorizontal;
        float gravity = (gravitationalConstant * particleMass);

        force += (gravity );
    
    vec3 velocity = vel[gl_GlobalInvocationID.x].xyz;
    vec3 acceleration = force / particleMass;
    velocity.y += (gravity * timeStep);
    //velocity.y += -0.1f;

    vel[gl_GlobalInvocationID.x].xyz = velocity;
    pos[gl_GlobalInvocationID.x].xyz += velocity * timeStep;
    if (pos[gl_GlobalInvocationID.x].y < 0)
    {
        //set splashPositions
        sPos[gl_GlobalInvocationID.x].xyz =  pos[gl_GlobalInvocationID.x].xyz;
        //currently no depth testing so all splash should be at Y 0
         sPos[gl_GlobalInvocationID.x].y = 0;
         sPos[gl_GlobalInvocationID.x].w = 1.5f;
        pos[gl_GlobalInvocationID.x].y = 70;
        velocity = vec3(0,0,0);
        vel[gl_GlobalInvocationID.x].xyz = velocity;
    }
    
    //time out splashes
    if(sPos[gl_GlobalInvocationID.x].w > 0)
    {
        sPos[gl_GlobalInvocationID.x].w = sPos[gl_GlobalInvocationID.x].w - 1 * timeStep;
    }
    else
    {
        sPos[gl_GlobalInvocationID.x].xyz = vec3(999,999,999);
    }
}

